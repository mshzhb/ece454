/*****************************************************************************
 * life.c
 * The original sequential implementation resides here.
 * Do not modify this file, but you are encouraged to borrow from it
 ****************************************************************************/
#include "life.h"
#include "util.h"
#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>

/**
 * Swapping the two boards only involves swapping pointers, not
 * copying values.
 */
#define SWAP_BOARDS( b1, b2 )  do { \
  char* temp = b1; \
  b1 = b2; \
  b2 = temp; \
} while(0)

#define BOARD( __board, __i, __j )  (__board[(__i) + LDA*(__j)])

#define CHECK_BIT(var,pos) ((var) & (1<<(pos)))

#define IS_ALIVE(var)       ((var) & (1<<(4))) //check if the 5th bit is set --> alive
#define IS_CLEAN(var)       (!((var) & (1<<(5)))) //if 6th bit is zero --> is clean
#define IS_NOT_VALID(var)   ((var) & (1<<(6)))
#define COUNT_CHANGED(var)  ((var) & (1<<(7)))

#define SET_ALIVE(var)      (var |=  (1<<4))
#define SET_DEAD(var)       (var &= ~(1<<4)) 

#define SET_CLEAN(var)      (var &= ~(1<<5))
#define CLEAR_VALID(var)    (var &= ~(1<<6))
#define CLEAR_COUNT(var)    (var &= ~(1<<7))

#define SET_DIRTY(var)                 (var |=  (1 << (5)))
#define SET_NOT_VALID(var)             (var |=  (1 << (6)))
#define SET_COUNT(var)                 (var |=  (1 << (7)))


#define TOGGLE_STATE(var) (var ^= 1 << 4)


#define INCR_AT(__board, __i, __j )  (__board[(__i) + nrows*(__j)] ++ )
#define DECR_AT(__board, __i, __j )  (__board[(__i) + nrows*(__j)] -- )
#define COUNT_OF_BOARD(__board, __i, __j )  (__board[(__i) + nrows*(__j)] & 0x0f  )
#define TOP_4_BITS(__board, __i, __j )  (__board[(__i) + nrows*(__j)] & 0xf0  )

void incr_neighbours2(char * board, int index, int nrows, int ncols);
void * process (void *ptr);

typedef struct Param {
    char * inboard;
    char * outboard;
    int ncols;
    int LDA;
    int start_row;
    int end_row;
    int nrows;
} Param;

char*
sequential_game_of_life (char* outboard, 
        char* inboard,
        const int nrows,
        const int ncols,
        const int gens_max)
{

    const int LDA = nrows;
    int curgen, i, j;


    int num_threads = 1;
    pthread_t thread[num_threads];
    Param *ptr = malloc(num_threads*sizeof(Param));
    
    int start_row = 0;
    int chunk_row = nrows/num_threads;
    int end_row = chunk_row;
    
    
    for (i=0; i<num_threads; i++){
        
        ptr[i].start_row = start_row;
        ptr[i].end_row = end_row;
        start_row = end_row;
        end_row = end_row + chunk_row;

        ptr[i].nrows = nrows;
        ptr[i].ncols = ncols;
        ptr[i].LDA = nrows;
        printf ("%d to %d\n", ptr[i].start_row, ptr[i].end_row);
    }
    
    
    for (curgen = 0; curgen < gens_max; curgen++)
    {
        
        printf("\n---CURGEN %d\n",curgen);
        printf("\n---INBOARD\n");
        for (i = 0; i < nrows; i++)
        {
            for (j = 0; j < ncols; j++)
            {
                char cell = BOARD(inboard,i,j);
                printf("\nat %x ",cell);
            }
        }
        printf("\n---OUTBOARD\n");
        for (i = 0; i < nrows; i++)
        {
            for (j = 0; j < ncols; j++)
            {

                char cell = BOARD(outboard,i,j);
                printf("\nat %x ",cell);
            }

        }
      
    
        for (i=0; i<num_threads; i++){
            ptr[i].inboard = inboard;
            ptr[i].outboard = outboard;
            //printf("\n----RUN! %d\n",i);
            pthread_create(&thread[i], NULL, process, (void*) &ptr[i]);
        }


        for (i=0; i<num_threads; i++){
            pthread_join(thread[i],NULL);
        }

        SWAP_BOARDS( outboard, inboard );

    }

/*
    printf("\n---COMPLETE\n");
    printf("\n---INBOARD\n");
    for (i = 0; i < nrows; i++)
    {
        for (j = 0; j < ncols; j++)
        {
            SET_CLEAN(BOARD(inboard,i,j));
            char cell = BOARD(inboard,i,j);
            printf("\nat %x ",cell);
        }
    }
    printf("\n---OUTBOARD\n");
    for (i = 0; i < nrows; i++)
    {
        for (j = 0; j < ncols; j++)
        {
            SET_CLEAN(BOARD(outboard,i,j));
            char cell = BOARD(outboard,i,j);
            printf("\nat %x ",cell);
        }
    }
*/

    //fixing output
    for (i = 0; i < nrows; i++)
    {
        for (j = 0; j < ncols; j++)
        {
            SET_CLEAN(BOARD(inboard,i,j));
            CLEAR_COUNT(BOARD(inboard,i,j));
            CLEAR_VALID(BOARD(inboard,i,j));
            BOARD(inboard,i,j) = BOARD(inboard,i,j) >> 4;
        }
    }

    return inboard;
}



void * process (void *ptr) {
    
    Param *p = (Param *) ptr;

    int start_row = p->start_row;
    int end_row = p->end_row;
    int ncols = p->ncols;
    int nrows = p->nrows;
    char * inboard = p-> inboard;
    char * outboard = p-> outboard;
    int i;
    int j;
    int LDA = p->LDA;
    
    printf("\nprocessing\n");

    printf("Writing to outboard, looks like this \n");
     printf("\n---OUTBOARD\n");
        for (i = 0; i < nrows; i++)
        {
            for (j = 0; j < ncols; j++)
            {

                char cell = BOARD(outboard,i,j);
                printf("\nat %x ",cell);
            }

        }
///*
    for (i = start_row; i < end_row; i++)
    {
        for (j = 0; j < ncols; j++)
        {
           
            printf("beg outboard[%d][%d] =  %x\n", i,j, BOARD(outboard,i,j));
            
            int statechange = 0; 
            char cell = BOARD(inboard, i, j);
            char state = cell & 0x1f;
            char alive = state & 0x10;
           
            if (state == 0x03 || state == 0x10 || state == 0x11 || (state >= 0x14 && state <= 0x18)) {
                
                statechange = 1;
                const int inorth = mod (i-1, nrows);
                const int isouth = mod (i+1, nrows);
                const int jwest = mod (j-1, ncols);
                const int jeast = mod (j+1, ncols);

                if (IS_CLEAN(BOARD (outboard, inorth, jwest))) {
                    BOARD(outboard,inorth, jwest) = TOP_4_BITS(outboard, inorth, jwest) | COUNT_OF_BOARD(inboard, inorth, jwest);
                    SET_DIRTY (BOARD(outboard, inorth, jwest));
                }
                if (IS_CLEAN(BOARD (outboard, inorth, j))) {
                    BOARD(outboard,inorth, j) = TOP_4_BITS(outboard, inorth, j) | COUNT_OF_BOARD(inboard, inorth, j);
                    SET_DIRTY (BOARD(outboard, inorth, j));
                }
                if (IS_CLEAN(BOARD (outboard, inorth, jeast))) {
                    BOARD(outboard,inorth, jeast) = TOP_4_BITS(outboard, inorth, jeast) | COUNT_OF_BOARD(inboard, inorth, jeast);
                    SET_DIRTY (BOARD(outboard, inorth, jeast));
                }
                if (IS_CLEAN(BOARD (outboard, i, jwest))) {
                    BOARD(outboard,i, jwest) = TOP_4_BITS(outboard, i, jwest) | COUNT_OF_BOARD(inboard, i, jwest);
                    SET_DIRTY (BOARD(outboard, i, jwest));
                }
                if (IS_CLEAN(BOARD (outboard, i, jeast))) {
                    BOARD(outboard,i, jeast) = TOP_4_BITS(outboard, i, jeast) | COUNT_OF_BOARD(inboard, i, jeast);
                    SET_DIRTY (BOARD(outboard, i, jeast));
                }
                if (IS_CLEAN(BOARD (outboard, isouth, jwest))) {
                    BOARD(outboard,isouth, jwest) = TOP_4_BITS(outboard, isouth, jwest) | COUNT_OF_BOARD(inboard, isouth, jwest);
                    SET_DIRTY(BOARD(outboard, isouth, jwest));
                }
                if (IS_CLEAN(BOARD (outboard, isouth, j))) {
                    BOARD(outboard, isouth, j) = TOP_4_BITS(outboard, isouth, j) | COUNT_OF_BOARD(inboard, isouth, j);
                    SET_DIRTY (BOARD(outboard, isouth, j));
                }
                if (IS_CLEAN(BOARD (outboard, isouth, jeast))) {
                    BOARD(outboard,isouth, jeast) = TOP_4_BITS(outboard, isouth, jeast) | COUNT_OF_BOARD(inboard, isouth, jeast);
                    SET_DIRTY (BOARD(outboard, isouth, jeast));
                }
                
                if (alive) {
                    printf("setting to dead - outboard[%d][%d] =  %x\n", i,j, BOARD(outboard,i,j));
                    printf("outboard[0][1] =  %x\n",BOARD(outboard,0,1));
                    SET_DEAD(BOARD(outboard,i,j));
                    DECR_AT (outboard, inorth, jwest);
                    DECR_AT (outboard, inorth, j);
                    DECR_AT (outboard, inorth, jeast);
                    DECR_AT (outboard, i, jwest);
                    DECR_AT (outboard, i, jeast);
                    DECR_AT (outboard, isouth, jwest);
                    DECR_AT (outboard, isouth, j);
                    DECR_AT (outboard, isouth, jeast);
                
                    printf("is now dead - outboard[%d][%d] =  %x\n", i,j, BOARD(outboard,i,j));
                    printf("outboard[0][1] =  %x\n",BOARD(outboard,0,1));
                        
                    
                } else {
                    printf("setting to alive - outboard[%d][%d] =  %x\n", i,j, BOARD(outboard,i,j));
                    SET_ALIVE(BOARD(outboard,i,j));
                    INCR_AT (outboard, inorth, jwest);
                    INCR_AT (outboard, inorth, j);
                    INCR_AT (outboard, inorth, jeast);
                    INCR_AT (outboard, i, jwest);
                    INCR_AT (outboard, i, jeast);
                    INCR_AT (outboard, isouth, jwest);
                    INCR_AT (outboard, isouth, j);
                    INCR_AT (outboard, isouth, jeast);
                    printf("is now alive - outboard[%d][%d] =  %x\n", i,j, BOARD(outboard,i,j));
                }
                SET_COUNT (BOARD(outboard, inorth, jwest));
                SET_COUNT (BOARD(outboard, inorth, j));
                SET_COUNT (BOARD(outboard, inorth, jeast));
                SET_COUNT (BOARD(outboard, i, jwest));
                SET_COUNT (BOARD(outboard, i, jeast));
                SET_COUNT (BOARD(outboard, isouth, jwest));
                SET_COUNT (BOARD(outboard, isouth, j));
                SET_COUNT (BOARD(outboard, isouth, jeast));
                printf("2outboard[0][1] =  %x\n",BOARD(outboard,0,1));
                
            }

            if (statechange) { 
                //if there was a statechange, we set inboard's not_valid bit
                printf("state changed outboard[%d][%d] =  %x\n", i,j, BOARD(outboard,i,j));
                printf("3outboard[0][1] =  %x\n",BOARD(outboard,0,1));
                SET_NOT_VALID(BOARD(inboard,i,j));
                                
            }
            else { //no state change occurred
                
                //make sure outboard contains the correct state
                if (IS_NOT_VALID(BOARD(outboard,i,j))) {
                    CLEAR_VALID(BOARD(outboard,i,j));
                    if (alive) {
                        SET_DEAD(BOARD(outboard,i,j));
                    }
                    else {
                        SET_ALIVE(BOARD(outboard,i,j));
                    }
                    
                }

                //make sure outboard has the correct neighbour count
                if (COUNT_CHANGED(BOARD(inboard,i,j))){ //we change outboard if inboard's neighbourcount has been changed
                    if (IS_CLEAN(BOARD(outboard,i,j))){ //we only change if outboard hasn't been changed yet
                        BOARD(outboard,i, j) = TOP_4_BITS(outboard, i, j) | COUNT_OF_BOARD(inboard, i, j);
                        SET_DIRTY (BOARD(outboard, i, j));
                        
                    }
                    CLEAR_COUNT(BOARD(inboard,i,j));
                    SET_CLEAN(BOARD(inboard,i,j));
                }
                printf("no state - outboard[%d][%d] =  %x\n", i,j, BOARD(outboard,i,j));
            }   
        
        }
    }   

 printf("DONE WRITING TO, looks like this \n");
     printf("\n---OUTBOARD\n");
        for (i = 0; i < nrows; i++)
        {
            for (j = 0; j < ncols; j++)
            {

                char cell = BOARD(outboard,i,j);
                printf("\nat %x ",cell);
            }

        }
  //*/
/*
    for (i = start_row; i < end_row; i++)
    {
        for (j = 0; j < ncols; j++)
        {
            //reset clean bit for inboard for next iteration
            SET_CLEAN(BOARD(inboard,i,j));

            
            char cell = BOARD(inboard,i,j);
            int alive = cell >> 4;
            //printf("\nat %x with state %d ",cell, alive);
            if (!alive) {
                if (cell == 0x03 ) {
                    //printf("YEA! going to be alive!");
                    const int inorth = mod (i-1, nrows);
                    const int isouth = mod (i+1, nrows);
                    const int jwest = mod (j-1, ncols);
                    const int jeast = mod (j+1, ncols);

                    if (IS_CLEAN(BOARD (outboard, inorth, jwest)))
                        BOARD(outboard,inorth, jwest) = TOP_4_BITS(outboard, inorth, jwest) | COUNT_OF_BOARD(inboard, inorth, jwest);

                    if (IS_CLEAN(BOARD (outboard, inorth, j)))
                        BOARD(outboard,inorth, j) = TOP_4_BITS(outboard, inorth, j) | COUNT_OF_BOARD(inboard, inorth, j);

                    if (IS_CLEAN(BOARD (outboard, inorth, jeast)))
                        BOARD(outboard,inorth, jeast) = TOP_4_BITS(outboard, inorth, jeast) | COUNT_OF_BOARD(inboard, inorth, jeast);

                    if (IS_CLEAN(BOARD (outboard, i, jwest)))
                        BOARD(outboard,i, jwest) = TOP_4_BITS(outboard, i, jwest) | COUNT_OF_BOARD(inboard, i, jwest);

                    if (IS_CLEAN(BOARD (outboard, i, jeast)))
                        BOARD(outboard,i, jeast) = TOP_4_BITS(outboard, i, jeast) | COUNT_OF_BOARD(inboard, i, jeast);

                    if (IS_CLEAN(BOARD (outboard, isouth, jwest)))
                        BOARD(outboard,isouth, jwest) = TOP_4_BITS(outboard, isouth, jwest) | COUNT_OF_BOARD(inboard, isouth, jwest);

                    if (IS_CLEAN(BOARD (outboard, isouth, j)))
                        BOARD(outboard, isouth, j) = TOP_4_BITS(outboard, isouth, j) | COUNT_OF_BOARD(inboard, isouth, j);

                    if (IS_CLEAN(BOARD (outboard, isouth, jeast)))
                        BOARD(outboard,isouth, jeast) = TOP_4_BITS(outboard, isouth, jeast) | COUNT_OF_BOARD(inboard, isouth, jeast);

                    SET_ALIVE(BOARD(outboard,i,j));
                    SET_ALIVE(BOARD(inboard,i,j));

                    INCR_AT (outboard, inorth, jwest);
                    INCR_AT (outboard, inorth, j);
                    INCR_AT (outboard, inorth, jeast);
                    INCR_AT (outboard, i, jwest);
                    INCR_AT (outboard, i, jeast);
                    INCR_AT (outboard, isouth, jwest);
                    INCR_AT (outboard, isouth, j);
                    INCR_AT (outboard, isouth, jeast);
                    
                    SET_DIRTY (BOARD(outboard, inorth, jwest));
                    SET_DIRTY (BOARD(outboard, inorth, j));
                    SET_DIRTY (BOARD(outboard, inorth, jeast));
                    SET_DIRTY (BOARD(outboard, i, jwest));
                    SET_DIRTY (BOARD(outboard, i, jeast));
                    SET_DIRTY (BOARD(outboard, isouth, jwest));
                    SET_DIRTY (BOARD(outboard, isouth, j));
                    SET_DIRTY (BOARD(outboard, isouth, jeast));

                }
            } else if (alive) {
                if (cell <= 0x11 || cell >=0x14) {
                    //printf("FOUND A LIFE GONNA DIE");
                    const int inorth = mod (i-1, nrows);
                    const int isouth = mod (i+1, nrows);
                    const int jwest = mod (j-1, ncols);
                    const int jeast = mod (j+1, ncols);

                    if (IS_CLEAN(BOARD (outboard, inorth, jwest)))
                        BOARD(outboard,inorth, jwest) = TOP_4_BITS(outboard, inorth, jwest) | COUNT_OF_BOARD(inboard, inorth, jwest);

                    if (IS_CLEAN(BOARD (outboard, inorth, j)))
                        BOARD(outboard,inorth, j) = TOP_4_BITS(outboard, inorth, j) | COUNT_OF_BOARD(inboard, inorth, j);

                    if (IS_CLEAN(BOARD (outboard, inorth, jeast)))
                        BOARD(outboard,inorth, jeast) = TOP_4_BITS(outboard, inorth, jeast) | COUNT_OF_BOARD(inboard, inorth, jeast);

                    if (IS_CLEAN(BOARD (outboard, i, jwest)))
                        BOARD(outboard,i, jwest) = TOP_4_BITS(outboard, i, jwest) | COUNT_OF_BOARD(inboard, i, jwest);

                    if (IS_CLEAN(BOARD (outboard, i, jeast)))
                        BOARD(outboard,i, jeast) = TOP_4_BITS(outboard, i, jeast) | COUNT_OF_BOARD(inboard, i, jeast);

                    if (IS_CLEAN(BOARD (outboard, isouth, jwest)))
                        BOARD(outboard,isouth, jwest) = TOP_4_BITS(outboard, isouth, jwest) | COUNT_OF_BOARD(inboard, isouth, jwest);

                    if (IS_CLEAN(BOARD (outboard, isouth, j)))
                        BOARD(outboard, isouth, j) = TOP_4_BITS(outboard, isouth, j) | COUNT_OF_BOARD(inboard, isouth, j);

                    if (IS_CLEAN(BOARD (outboard, isouth, jeast)))
                        BOARD(outboard,isouth, jeast) = TOP_4_BITS(outboard, isouth, jeast) | COUNT_OF_BOARD(inboard, isouth, jeast);

                    SET_DEAD(BOARD(outboard,i,j));
                    SET_DEAD(BOARD(inboard,i,j));

                    DECR_AT (outboard, inorth, jwest);
                    DECR_AT (outboard, inorth, j);
                    DECR_AT (outboard, inorth, jeast);
                    DECR_AT (outboard, i, jwest);
                    DECR_AT (outboard, i, jeast);
                    DECR_AT (outboard, isouth, jwest);
                    DECR_AT (outboard, isouth, j);
                    DECR_AT (outboard, isouth, jeast);
                    
                    SET_DIRTY (BOARD(outboard, inorth, jwest));
                    SET_DIRTY (BOARD(outboard, inorth, j));
                    SET_DIRTY (BOARD(outboard, inorth, jeast));
                    SET_DIRTY (BOARD(outboard, i, jwest));
                    SET_DIRTY (BOARD(outboard, i, jeast));
                    SET_DIRTY (BOARD(outboard, isouth, jwest));
                    SET_DIRTY (BOARD(outboard, isouth, j));
                    SET_DIRTY (BOARD(outboard, isouth, jeast));
                    

                }
            }


            if (IS_CLEAN(BOARD (outboard, i, j))) 
                BOARD(outboard,i, j) = TOP_4_BITS(inboard, i, j) | COUNT_OF_BOARD(inboard, i, j);
            SET_DIRTY (BOARD(outboard, i, j));




        }
    }
*/

}


